// Automatically generated by flapigen
package com.example.swift_final.lib;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
/**
 * Struct to hold information received from the server
 */
public final class RequestInfo {

    public RequestInfo(@NonNull DownloadInfo download_info, @NonNull String filename, long file_size, @NonNull TypeOfFile category, boolean resumable) {
        long a0 = download_info.mNativeObj;
        download_info.mNativeObj = 0;
        int a3 = category.getValue();
        mNativeObj = init(a0, filename, file_size, a3, resumable);
        JNIReachabilityFence.reachabilityFence2(download_info, category);
    }
    private static native long init(long download_info, @NonNull String filename, long file_size, int category, boolean resumable);

    public final @NonNull String getUrl() {
        String ret = do_getUrl(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_getUrl(long self);

    public final @NonNull java.util.Optional<String> getFileSize() {
        String ret = do_getFileSize(mNativeObj);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native @Nullable String do_getFileSize(long self);

    public final long getFileSizeInBytes() {
        long ret = do_getFileSizeInBytes(mNativeObj);

        return ret;
    }
    private static native long do_getFileSizeInBytes(long self);

    public final boolean isResumable() {
        boolean ret = do_isResumable(mNativeObj);

        return ret;
    }
    private static native boolean do_isResumable(long self);

    public final TypeOfFile typeOfFile() {
        int ret = do_typeOfFile(mNativeObj);
        TypeOfFile convRet = TypeOfFile.fromInt(ret);

        return convRet;
    }
    private static native int do_typeOfFile(long self);

    public final FileCategory getCategory() {
        int ret = do_getCategory(mNativeObj);
        FileCategory convRet = FileCategory.fromInt(ret);

        return convRet;
    }
    private static native int do_getCategory(long self);

    public final @NonNull String filename() {
        String ret = do_filename(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_filename(long self);

    public final @NonNull String toString() {
        String ret = do_toString(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_toString(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ RequestInfo(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}