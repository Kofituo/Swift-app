//Automatically generated by rifgen
use crate::*;
use jni_sys::*;
foreign_enum!(
	enum TypeOfFile {
		Word = TypeOfFile::Word,
		Excel = TypeOfFile::Excel,
		PowerPoint = TypeOfFile::PowerPoint,
		Jpg = TypeOfFile::Jpg,
		Mkv = TypeOfFile::Mkv,
		Png = TypeOfFile::Png,
		Html = TypeOfFile::Html,
		MpFour = TypeOfFile::MpFour,
		Pdf = TypeOfFile::Pdf,
		Other = TypeOfFile::Other,
		Application = TypeOfFile::Application,
		Audio = TypeOfFile::Audio,
		MpThree = TypeOfFile::MpThree,
		Gif = TypeOfFile::Gif,
		Video = TypeOfFile::Video,
		Zip = TypeOfFile::Zip,
		Image = TypeOfFile::Image,
		Iso = TypeOfFile::Iso,
		ThreeGp = TypeOfFile::ThreeGp,
		Flv = TypeOfFile::Flv,
		Document = TypeOfFile::Document,
		Compressed = TypeOfFile::Compressed,
	}
);
foreign_enum!(
	enum FileCategory {
		Video = FileCategory::Video,
		Document = FileCategory::Document,
		Image = FileCategory::Image,
		Compressed = FileCategory::Compressed,
		Audio = FileCategory::Audio,
		Application = FileCategory::Application,
		Other = FileCategory::Other,
	}
);
foreign_enum!(
	enum ResponseErrors {
		ErrorParsingRequest = ResponseErrors::ErrorParsingRequest,
		UnableToDecodeRequest = ResponseErrors::UnableToDecodeRequest,
		RedirectedManyTimes = ResponseErrors::RedirectedManyTimes,
		ConnectionTimeout = ResponseErrors::ConnectionTimeout,
		UnknownError = ResponseErrors::UnknownError,
	}
);
foreign_class!(
	class Logger {
		# [doc = "Set up logging"]
		fn Logger::initialise_logging(); alias initialiseLogging;
	}
);
foreign_class!(
	class Authentication {
		self_type Authentication;
		constructor Authentication::new(username : String , password : Option < & str >)->Authentication;
	}
);
foreign_class!(
	class DownloadInfo {
		self_type DownloadInfo;
		constructor DownloadInfo::constructor(url : String , auth : Option < Authentication >)->DownloadInfo;
		fn DownloadInfo::get_url(& self)->&str; alias getUrl;
	}
);
foreign_class!(
	# [doc = " Struct to hold information received from the server"]
	class RequestInfo {
		self_type RequestInfo;
		constructor RequestInfo::new(download_info : DownloadInfo , filename : String , file_size : i64 , category : TypeOfFile , resumable : bool ,)->RequestInfo;
		fn RequestInfo::get_url(& self)->&str; alias getUrl;
		fn RequestInfo::get_file_size(& self)->Option<String>; alias getFileSize;
		fn RequestInfo::get_file_size_in_bytes(& self)->u64; alias getFileSizeInBytes;
		fn RequestInfo::is_resumable(& self)->bool; alias isResumable;
		fn RequestInfo::type_of_file(& self)->TypeOfFile; alias typeOfFile;
		fn RequestInfo::get_category(& self)->FileCategory; alias getCategory;
		fn RequestInfo::filename(& self)->&str; alias filename;
		fn RequestInfo::to_string(& self)->String; alias toString;
	}
);
foreign_callback!(
	callback DownloadCallback {
		self_type DownloadCallback;
		responseError = DownloadCallback::response_error(& self , error : ResponseErrors);
		statusError = DownloadCallback::status_error(& self , error_code : u16 , reason : & str);
		isActive = DownloadCallback::is_active(& self)->bool;
	}
);
foreign_class!(
	class Downloader {
		fn Downloader::get_request_info(download_info : & DownloadInfo , download_callback : & Box < dyn DownloadCallback > ,)->Option<RequestInfo>; alias getRequestInfo;
	}
);
foreign_class!(
	class FileType {
		self_type FileType;
		constructor FileType::new(extension : & str)->FileType;
		fn FileType::get_type(& self)->TypeOfFile; alias getType;
		fn FileType::get_category(type_of_file : TypeOfFile)->FileCategory; alias getCategory;
	}
);
